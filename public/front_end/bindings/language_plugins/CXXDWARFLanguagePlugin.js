import{DebuggerLanguagePlugin,DebuggerLanguagePluginError,RawLocation,RawModule,SourceLocation,Variable}from"../DebuggerLanguagePlugins.js";let AddRawModuleResponse,SourceLocationToRawLocationResponse,RawLocationToSourceLocationResponse,ListVariablesInScopeResponse,EvaluateVariableResponse;async function _sendJsonRPC(o,e){const a=JSON.stringify({jsonrpc:"2.0",method:o,params:e,id:0}),n=new Request("http://localhost:8888",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:a}),r=await fetch(n);if(200!==r.status)throw new DebuggerLanguagePluginError(r.status.toString(),"JSON-RPC request failed");const t=(await r.json()).result;if(t.error)throw new DebuggerLanguagePluginError(t.error.code,t.error.message);return t}export class CXXDWARFLanguagePlugin{handleScript(o){return o.isWasm()&&!o.sourceURL.startsWith("wasm://")&&("wasm://dwarf"===o.sourceMapURL||!o.sourceMapURL)}async addRawModule(o,e,a){return(await _sendJsonRPC("addRawModule",{rawModuleId:o,symbols:e,rawModule:function(o){if(!o.code)return{url:o.url};const e=new Uint8Array(o.code);let a="";const n=e.byteLength;for(let o=0;o<n;o++)a+=String.fromCharCode(e[o]);return{code:btoa(a)}}(a)})).sources}async sourceLocationToRawLocation(o){return(await _sendJsonRPC("sourceLocationToRawLocation",o)).rawLocation}async rawLocationToSourceLocation(o){return(await _sendJsonRPC("rawLocationToSourceLocation",o)).sourceLocation}async listVariablesInScope(o){return(await _sendJsonRPC("listVariablesInScope",o)).variable}async evaluateVariable(o,e){return null}dispose(){}}