import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import{ChunkedFileReader,ChunkedReader}from"./FileUtils.js";export class TempFile{constructor(){this._lastBlob=null}write(e){this._lastBlob&&e.unshift(this._lastBlob),this._lastBlob=new Blob(e,{type:"text/plain"})}read(){return this.readRange()}size(){return this._lastBlob?this._lastBlob.size:0}async readRange(e,t){if(!this._lastBlob)return Common.Console.Console.instance().error("Attempt to read a temp file that was never written"),Promise.resolve("");const s="number"==typeof e||"number"==typeof t?this._lastBlob.slice(e,t):this._lastBlob,i=new FileReader;try{await new Promise((e,t)=>{i.onloadend=e,i.onerror=t,i.readAsText(s)})}catch(e){Common.Console.Console.instance().error("Failed to read from temp file: "+e.message)}return i.result}copyToOutputStream(e,t){if(!this._lastBlob)return e.close(),Promise.resolve(null);const s=new ChunkedFileReader(this._lastBlob,1e7,t);return s.read(e).then(e=>e?null:s.error())}remove(){this._lastBlob=null}}export class TempFileBackingStorage{constructor(){this._file=null,this._strings,this._stringsLength,this.reset()}appendString(e){this._strings.push(e),this._stringsLength+=e.length;this._stringsLength>10485760&&this._flush()}appendAccessibleString(e){this._flush();const t=this._file.size();return this._strings.push(e),this._flush(),this._file.readRange.bind(this._file,t,this._file.size())}_flush(){this._strings.length&&(this._file||(this._file=new TempFile),this._stringsLength=0,this._file.write(this._strings.splice(0)))}finishWriting(){this._flush()}reset(){this._file&&this._file.remove(),this._file=null,this._strings=[],this._stringsLength=0}writeToStream(e){return this._file?this._file.copyToOutputStream(e):Promise.resolve(null)}}