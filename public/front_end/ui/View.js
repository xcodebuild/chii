import{TabbedPane}from"./TabbedPane.js";import{ItemsProvider,Toolbar,ToolbarItem,ToolbarMenuButton}from"./Toolbar.js";import{ViewManager}from"./ViewManager.js";import{VBox,Widget}from"./Widget.js";export class View{viewId(){}title(){}isCloseable(){}isTransient(){}toolbarItems(){}widget(){}disposeView(){}}export const _symbol=Symbol("view");export const _widgetSymbol=Symbol("widget");export const widgetSymbol=_widgetSymbol;export class SimpleView extends VBox{constructor(e,t){super(t),this._title=e,this[_symbol]=this}viewId(){return this._title}title(){return this._title}isCloseable(){return!1}isTransient(){return!1}toolbarItems(){return Promise.resolve([])}widget(){return Promise.resolve(this)}revealView(){return ViewManager.instance().revealView(this)}disposeView(){}}export class ProvidedView{constructor(e){this._extension=e}viewId(){return this._extension.descriptor().id}title(){return this._extension.title()}isCloseable(){return"closeable"===this._extension.descriptor().persistence}isTransient(){return"transient"===this._extension.descriptor().persistence}toolbarItems(){const e=this._extension.descriptor().actionIds;if(e){const t=e.split(",").map(e=>Toolbar.createActionButtonForId(e.trim()));return Promise.resolve(t)}return this._extension.descriptor().hasToolbar?this.widget().then(e=>e.toolbarItems()):Promise.resolve([])}async widget(){this._widgetRequested=!0;const e=await this._extension.instance();if(!(e instanceof Widget))throw new Error("view className should point to a UI.Widget");return e[_symbol]=this,e}async disposeView(){if(!this._widgetRequested)return;(await this.widget()).ownerViewDisposed()}}export class ViewLocation{appendApplicableItems(e){}appendView(e,t){}showView(e,t,i){}removeView(e){}widget(){}}export class TabbedViewLocation extends ViewLocation{tabbedPane(){}enableMoreTabsButton(){}}export class ViewLocationResolver{resolveLocation(e){}}