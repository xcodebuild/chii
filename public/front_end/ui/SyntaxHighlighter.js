export class SyntaxHighlighter{constructor(e,t){this._mimeType=e,this._stripExtraWhitespace=t}createSpan(e,t){const n=createElement("span");return n.className=t.replace(/\S+/g,"cm-$&"),this._stripExtraWhitespace&&"whitespace"!==t&&(e=e.replace(/^[\n\r]*/,"").replace(/\s*$/,"")),n.createTextChild(e),n}syntaxHighlightNode(e){const t=e.textContent.split("\n");let n,i;return self.runtime.extension(TextUtils.TokenizerFactory).instance().then(function(r){e.removeChildren();const c=r.createTokenizer(this._mimeType);for(let r=0;r<t.length;++r){if(i=t[r],n=0,c(i,s.bind(this)),n<i.length){const t=i.substring(n,i.length);e.createTextChild(t)}r<t.length-1&&e.createTextChild("\n")}}.bind(this));function s(t,s,r,c){if(s){if(r>n){const t=i.substring(n,r);e.createTextChild(t)}e.appendChild(this.createSpan(t,s)),n=c}}}}