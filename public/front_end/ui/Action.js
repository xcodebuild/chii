import*as Common from"../common/common.js";import{ActionDelegate}from"./ActionDelegate.js";export class Action extends Common.ObjectWrapper.ObjectWrapper{constructor(t){super(),this._extension=t,this._enabled=!0,this._toggled=!1}id(){return this._extension.descriptor().actionId}extension(){return this._extension}async execute(){if(!this._extension.canInstantiate())return!1;const t=await this._extension.instance(),e=this.id();return t.handleAction(self.UI.context,e)}icon(){return this._extension.descriptor().iconClass||""}toggledIcon(){return this._extension.descriptor().toggledIconClass||""}toggleWithRedColor(){return!!this._extension.descriptor().toggleWithRedColor}setEnabled(t){this._enabled!==t&&(this._enabled=t,this.dispatchEventToListeners(Events.Enabled,t))}enabled(){return this._enabled}category(){return ls(this._extension.descriptor().category||"")}tags(){return this._extension.descriptor().tags||""}toggleable(){return!!this._extension.descriptor().toggleable}title(){let t=this._extension.title()||"";const e=this._extension.descriptor().options;if(e)for(const n of e)n.value!==this._toggled&&(t=ls(n.title));return t}toggled(){return this._toggled}setToggled(t){console.assert(this.toggleable(),"Shouldn't be toggling an untoggleable action",this.id()),this._toggled!==t&&(this._toggled=t,this.dispatchEventToListeners(Events.Toggled,t))}}export const Events={Enabled:Symbol("Enabled"),Toggled:Symbol("Toggled")};