import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{EmulatedDevice,Horizontal,Mode}from"./EmulatedDevices.js";export class DeviceModeModel extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._screenRect=new UI.Geometry.Rect(0,0,1,1),this._visiblePageRect=new UI.Geometry.Rect(0,0,1,1),this._availableSize=new UI.Geometry.Size(1,1),this._preferredSize=new UI.Geometry.Size(1,1),this._initialized=!1,this._appliedDeviceSize=new UI.Geometry.Size(1,1),this._appliedDeviceScaleFactor=window.devicePixelRatio,this._appliedUserAgentType=UA.Desktop,this._scaleSetting=Common.Settings.Settings.instance().createSetting("emulation.deviceScale",1),this._scaleSetting.get()||this._scaleSetting.set(1),this._scaleSetting.addChangeListener(this._scaleSettingChanged,this),this._widthSetting=Common.Settings.Settings.instance().createSetting("emulation.deviceWidth",400),this._widthSetting.get()<MinDeviceSize&&this._widthSetting.set(MinDeviceSize),this._widthSetting.get()>MaxDeviceSize&&this._widthSetting.set(MaxDeviceSize),this._widthSetting.addChangeListener(this._widthSettingChanged,this),this._heightSetting=Common.Settings.Settings.instance().createSetting("emulation.deviceHeight",0),this._heightSetting.get()&&this._heightSetting.get()<MinDeviceSize&&this._heightSetting.set(MinDeviceSize),this._heightSetting.get()>MaxDeviceSize&&this._heightSetting.set(MaxDeviceSize),this._heightSetting.addChangeListener(this._heightSettingChanged,this),this._uaSetting=Common.Settings.Settings.instance().createSetting("emulation.deviceUA",UA.Mobile),this._uaSetting.addChangeListener(this._uaSettingChanged,this),this._deviceScaleFactorSetting=Common.Settings.Settings.instance().createSetting("emulation.deviceScaleFactor",0),this._deviceScaleFactorSetting.addChangeListener(this._deviceScaleFactorSettingChanged,this),this._deviceOutlineSetting=Common.Settings.Settings.instance().moduleSetting("emulation.showDeviceOutline"),this._deviceOutlineSetting.addChangeListener(this._deviceOutlineSettingChanged,this),this._toolbarControlsEnabledSetting=Common.Settings.Settings.instance().createSetting("emulation.toolbarControlsEnabled",!0,Common.Settings.SettingStorageType.Session),this._type=Type.None,this._device=null,this._mode=null,this._fitScale=1,this._touchEnabled=!1,this._touchMobile=!1,this._emulationModel=null,this._onModelAvailable=null,SDK.SDKModel.TargetManager.instance().observeModels(SDK.EmulationModel.EmulationModel,this)}static widthValidator(e){let t,i=!1;return/^[\d]+$/.test(e)?e>MaxDeviceSize?t=ls`Width must be less than or equal to ${MaxDeviceSize}.`:e<MinDeviceSize?t=ls`Width must be greater than or equal to ${MinDeviceSize}.`:i=!0:t=ls`Width must be a number.`,{valid:i,errorMessage:t}}static heightValidator(e){let t,i=!1;return/^[\d]+$/.test(e)?e>MaxDeviceSize?t=ls`Height must be less than or equal to ${MaxDeviceSize}.`:e<MinDeviceSize?t=ls`Height must be greater than or equal to ${MinDeviceSize}.`:i=!0:t=ls`Height must be a number.`,{valid:i,errorMessage:t}}static scaleValidator(e){let t,i=!1;const s=Number(e.trim());return e?Number.isNaN(s)?t=ls`Device pixel ratio must be a number or blank.`:e>MaxDeviceScaleFactor?t=ls`Device pixel ratio must be less than or equal to ${MaxDeviceScaleFactor}.`:e<MinDeviceScaleFactor?t=ls`Device pixel ratio must be greater than or equal to ${MinDeviceScaleFactor}.`:i=!0:i=!0,{valid:i,errorMessage:t}}setAvailableSize(e,t){this._availableSize=e,this._preferredSize=t,this._initialized=!0,this._calculateAndEmulate(!1)}emulate(e,t,i,s){const n=this._type!==e||this._device!==t||this._mode!==i;if(this._type=e,e===Type.Device){if(console.assert(t&&i,"Must pass device and mode for device emulation"),this._mode=i,this._device=t,this._initialized){const e=t.orientationByName(i.orientation);this._scaleSetting.set(s||this._calculateFitScale(e.width,e.height,this._currentOutline(),this._currentInsets()))}}else this._device=null,this._mode=null;e!==Type.None&&Host.userMetrics.actionTaken(Host.UserMetrics.Action.DeviceModeEnabled),this._calculateAndEmulate(n)}setWidth(e){const t=Math.min(MaxDeviceSize,this._preferredScaledWidth());e=Math.max(Math.min(e,t),1),this._widthSetting.set(e)}setWidthAndScaleToFit(e){e=Math.max(Math.min(e,MaxDeviceSize),1),this._scaleSetting.set(this._calculateFitScale(e,this._heightSetting.get())),this._widthSetting.set(e)}setHeight(e){const t=Math.min(MaxDeviceSize,this._preferredScaledHeight());(e=Math.max(Math.min(e,t),0))===this._preferredScaledHeight()&&(e=0),this._heightSetting.set(e)}setHeightAndScaleToFit(e){e=Math.max(Math.min(e,MaxDeviceSize),0),this._scaleSetting.set(this._calculateFitScale(this._widthSetting.get(),e)),this._heightSetting.set(e)}setScale(e){this._scaleSetting.set(e)}device(){return this._device}mode(){return this._mode}type(){return this._type}screenImage(){return this._device&&this._mode?this._device.modeImage(this._mode):""}outlineImage(){return this._device&&this._mode&&this._deviceOutlineSetting.get()?this._device.outlineImage(this._mode):""}outlineRect(){return this._outlineRect}screenRect(){return this._screenRect}visiblePageRect(){return this._visiblePageRect}scale(){return this._scale}fitScale(){return this._fitScale}appliedDeviceSize(){return this._appliedDeviceSize}appliedDeviceScaleFactor(){return this._appliedDeviceScaleFactor}appliedUserAgentType(){return this._appliedUserAgentType}isFullHeight(){return!this._heightSetting.get()}_isMobile(){switch(this._type){case Type.Device:return this._device.mobile();case Type.None:return!1;case Type.Responsive:return this._uaSetting.get()===UA.Mobile||this._uaSetting.get()===UA.MobileNoTouch}return!1}enabledSetting(){return Common.Settings.Settings.instance().createSetting("emulation.showDeviceMode",!1)}scaleSetting(){return this._scaleSetting}uaSetting(){return this._uaSetting}deviceScaleFactorSetting(){return this._deviceScaleFactorSetting}deviceOutlineSetting(){return this._deviceOutlineSetting}toolbarControlsEnabledSetting(){return this._toolbarControlsEnabledSetting}reset(){this._deviceScaleFactorSetting.set(0),this._scaleSetting.set(1),this.setWidth(400),this.setHeight(0),this._uaSetting.set(UA.Mobile)}modelAdded(e){if(!this._emulationModel&&e.supportsDeviceEmulation()){if(this._emulationModel=e,this._onModelAvailable){const e=this._onModelAvailable;this._onModelAvailable=null,e()}}else e.emulateTouch(this._touchEnabled,this._touchMobile)}modelRemoved(e){this._emulationModel===e&&(this._emulationModel=null)}inspectedURL(){return this._emulationModel?this._emulationModel.target().inspectedURL():null}_scaleSettingChanged(){this._calculateAndEmulate(!1)}_widthSettingChanged(){this._calculateAndEmulate(!1)}_heightSettingChanged(){this._calculateAndEmulate(!1)}_uaSettingChanged(){this._calculateAndEmulate(!0)}_deviceScaleFactorSettingChanged(){this._calculateAndEmulate(!1)}_deviceOutlineSettingChanged(){this._calculateAndEmulate(!1)}_preferredScaledWidth(){return Math.floor(this._preferredSize.width/(this._scaleSetting.get()||1))}_preferredScaledHeight(){return Math.floor(this._preferredSize.height/(this._scaleSetting.get()||1))}_currentOutline(){let e=new UI.Geometry.Insets(0,0,0,0);if(this._type!==Type.Device)return e;const t=this._device.orientationByName(this._mode.orientation);return this._deviceOutlineSetting.get()&&(e=t.outlineInsets||e),e}_currentInsets(){return this._type!==Type.Device?new UI.Geometry.Insets(0,0,0,0):this._mode.insets}_calculateAndEmulate(e){this._emulationModel||(this._onModelAvailable=this._calculateAndEmulate.bind(this,e));const t=this._isMobile();if(this._type===Type.Device){const i=this._device.orientationByName(this._mode.orientation),s=this._currentOutline(),n=this._currentInsets();this._fitScale=this._calculateFitScale(i.width,i.height,s,n),this._appliedUserAgentType=t?this._device.touch()?UA.Mobile:UA.MobileNoTouch:this._device.touch()?UA.DesktopTouch:UA.Desktop,this._applyDeviceMetrics(new UI.Geometry.Size(i.width,i.height),n,s,this._scaleSetting.get(),this._device.deviceScaleFactor,t,this._mode.orientation===Horizontal?Protocol.Emulation.ScreenOrientationType.LandscapePrimary:Protocol.Emulation.ScreenOrientationType.PortraitPrimary,e),this._applyUserAgent(this._device.userAgent),this._applyTouch(this._device.touch(),t)}else if(this._type===Type.None)this._fitScale=this._calculateFitScale(this._availableSize.width,this._availableSize.height),this._appliedUserAgentType=UA.Desktop,this._applyDeviceMetrics(this._availableSize,new UI.Geometry.Insets(0,0,0,0),new UI.Geometry.Insets(0,0,0,0),1,0,t,null,e),this._applyUserAgent(""),this._applyTouch(!1,!1);else if(this._type===Type.Responsive){let i=this._widthSetting.get();(!i||i>this._preferredScaledWidth())&&(i=this._preferredScaledWidth());let s=this._heightSetting.get();(!s||s>this._preferredScaledHeight())&&(s=this._preferredScaledHeight());const n=t?defaultMobileScaleFactor:0;this._fitScale=this._calculateFitScale(this._widthSetting.get(),this._heightSetting.get()),this._appliedUserAgentType=this._uaSetting.get(),this._applyDeviceMetrics(new UI.Geometry.Size(i,s),new UI.Geometry.Insets(0,0,0,0),new UI.Geometry.Insets(0,0,0,0),this._scaleSetting.get(),this._deviceScaleFactorSetting.get()||n,t,s>=i?Protocol.Emulation.ScreenOrientationType.PortraitPrimary:Protocol.Emulation.ScreenOrientationType.LandscapePrimary,e),this._applyUserAgent(t?_defaultMobileUserAgent:""),this._applyTouch(this._uaSetting.get()===UA.DesktopTouch||this._uaSetting.get()===UA.Mobile,this._uaSetting.get()===UA.Mobile)}const i=this._emulationModel?this._emulationModel.overlayModel():null;i&&i.setShowViewportSizeOnResize(this._type===Type.None),this.dispatchEventToListeners(Events.Updated)}_calculateFitScale(e,t,i,s){const n=i?i.left+i.right:0,a=i?i.top+i.bottom:0,o=s?s.left+s.right:0,h=s?s.top+s.bottom:0;let l=Math.min(e?this._preferredSize.width/(e+n):1,t?this._preferredSize.height/(t+a):1);l=Math.min(Math.floor(100*l),100);let c=l;for(;c>.7*l;){let i=!0;if(e&&(i=i&&Number.isInteger((e-o)*c/100)),t&&(i=i&&Number.isInteger((t-h)*c/100)),i)return c/100;c-=1}return l/100}setSizeAndScaleToFit(e,t){this._scaleSetting.set(this._calculateFitScale(e,t)),this.setWidth(e),this.setHeight(t)}_applyUserAgent(e){self.SDK.multitargetNetworkManager.setUserAgentOverride(e)}_applyDeviceMetrics(e,t,i,s,n,a,o,h){e.width=Math.max(1,Math.floor(e.width)),e.height=Math.max(1,Math.floor(e.height));let l=e.width-t.left-t.right,c=e.height-t.top-t.bottom;this._emulatedPageSize=new UI.Geometry.Size(l,c);const r=t.left,d=t.top,g=o===Protocol.Emulation.ScreenOrientationType.LandscapePrimary?90:0;if(this._appliedDeviceSize=e,this._appliedDeviceScaleFactor=n||window.devicePixelRatio,this._screenRect=new UI.Geometry.Rect(Math.max(0,(this._availableSize.width-e.width*s)/2),i.top*s,e.width*s,e.height*s),this._outlineRect=new UI.Geometry.Rect(this._screenRect.left-i.left*s,0,(i.left+e.width+i.right)*s,(i.top+e.height+i.bottom)*s),this._visiblePageRect=new UI.Geometry.Rect(r*s,d*s,Math.min(l*s,this._availableSize.width-this._screenRect.left-r*s),Math.min(c*s,this._availableSize.height-this._screenRect.top-d*s)),this._scale=s,1===s&&this._availableSize.width>=e.width&&this._availableSize.height>=e.height&&(l=0,c=0),this._visiblePageRect.width===l*s&&this._visiblePageRect.height===c*s&&Number.isInteger(l*s)&&Number.isInteger(c*s)&&(l=0,c=0),this._emulationModel)if(h&&this._emulationModel.resetPageScaleFactor(),l||c||a||n||1!==s||o){const t={width:l,height:c,deviceScaleFactor:n,mobile:a,scale:s,screenWidth:e.width,screenHeight:e.height,positionX:r,positionY:d,dontSetVisibleSize:!0};o&&(t.screenOrientation={type:o,angle:g}),this._emulationModel.emulateDevice(t)}else this._emulationModel.emulateDevice(null)}async captureScreenshot(e,t){const i=this._emulationModel?this._emulationModel.target().model(SDK.ScreenCaptureModel.ScreenCaptureModel):null;if(!i)return null;const s=this._emulationModel?this._emulationModel.overlayModel():null;let n;if(s&&s.setShowViewportSizeOnResize(!1),e){const e=await i.fetchLayoutMetrics();if(!e)return null;const s=Math.min(16384/this._appliedDeviceScaleFactor,e.contentHeight);if(n={width:Math.floor(e.contentWidth),height:Math.floor(s),deviceScaleFactor:this._appliedDeviceScaleFactor,mobile:this._isMobile()},t={x:0,y:0,width:n.width,height:n.height,scale:1},this._device){const e=this._mode.orientation===Horizontal?Protocol.Emulation.ScreenOrientationType.LandscapePrimary:Protocol.Emulation.ScreenOrientationType.PortraitPrimary,t=e===Protocol.Emulation.ScreenOrientationType.LandscapePrimary?90:0;n.screenOrientation={type:e,angle:t}}await this._emulationModel.resetPageScaleFactor(),await this._emulationModel.emulateDevice(n)}const a=await i.captureScreenshot("png",100,t);if(e){if(this._device){const e=this._device.orientationByName(this._mode.orientation);n.width=e.width,n.height=e.height}else n.width=0,n.height=0;await this._emulationModel.emulateDevice(n)}return this._calculateAndEmulate(!1),a}_applyTouch(e,t){this._touchEnabled=e,this._touchMobile=t;for(const i of SDK.SDKModel.TargetManager.instance().models(SDK.EmulationModel.EmulationModel))i.emulateTouch(e,t)}}export const Events={Updated:"Updated"};export const Type={None:"None",Responsive:"Responsive",Device:"Device"};export const UA={Mobile:Common.UIString.UIString("Mobile"),MobileNoTouch:Common.UIString.UIString("Mobile (no touch)"),Desktop:Common.UIString.UIString("Desktop"),DesktopTouch:Common.UIString.UIString("Desktop (touch)")};export const MinDeviceSize=50;export const MaxDeviceSize=9999;export const MinDeviceScaleFactor=0;export const MaxDeviceScaleFactor=10;export const MaxDeviceNameLength=50;const _mobileUserAgent="Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/%s Mobile Safari/537.36";export const _defaultMobileUserAgent=SDK.NetworkManager.MultitargetNetworkManager.patchUserAgentWithChromeVersion(_mobileUserAgent);export const defaultMobileScaleFactor=2;