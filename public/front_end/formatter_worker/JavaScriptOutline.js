import*as Platform from"../platform/platform.js";import*as TextUtils from"../text_utils/text_utils.js";import{ESTreeWalker}from"./ESTreeWalker.js";export function javaScriptOutline(e){let t,n=[],r=0;try{t=acorn.parse(e,{ranges:!1})}catch(n){t=acorn.loose.parse(e,{ranges:!1})}const i=Platform.StringUtilities.findLineEndingIndexes(e),s=new TextUtils.TextCursor.TextCursor(i);function o(e){const t="class "+c(e);s.advance(e.start),m({name:t,line:s.lineNumber(),column:s.columnNumber()})}function a(e,t,n){let r=c(e);t.generator&&(r="*"+r),n&&(r=n+" "+r),t.async&&(r="async "+r),s.advance(e.start),m({name:r,line:s.lineNumber(),column:s.columnNumber(),arguments:f(t.params)})}function p(e){return!!e&&("MemberExpression"===e.type?!e.computed&&"Identifier"===e.property.type:"Identifier"===e.type)}function l(e){return!!e&&("FunctionExpression"===e.type||"ArrowFunctionExpression"===e.type)}function u(e){return!!e&&"ClassExpression"===e.type}function c(e){return"MemberExpression"===e.type&&(e=e.property),console.assert("Identifier"===e.type,"Cannot extract identifier from unknown type: "+e.type),e.name}function f(e){const t=[];for(const n of e)"Identifier"===n.type?t.push(n.name):"RestElement"===n.type&&"Identifier"===n.argument.type?t.push("..."+n.argument.name):console.error("Error: unexpected function parameter type: "+n.type);return"("+t.join(", ")+")"}function m(e){n.push(e),s.offset()-r<1e5||(postMessage({chunk:n,isLastChunk:!1}),n=[],r=s.offset())}new ESTreeWalker((function(e){if("ClassDeclaration"===e.type)o(e.id);else if("VariableDeclarator"===e.type&&u(e.init))o(e.id);else if("AssignmentExpression"===e.type&&p(e.left)&&u(e.right))o(e.left);else if("Property"===e.type&&p(e.key)&&u(e.value))o(e.key);else if("FunctionDeclaration"===e.type)a(e.id,e);else if("VariableDeclarator"===e.type&&l(e.init))a(e.id,e.init);else if("AssignmentExpression"===e.type&&p(e.left)&&l(e.right))a(e.left,e.right);else if(("MethodDefinition"===e.type||"Property"===e.type)&&p(e.key)&&l(e.value)){const t=[];"get"!==e.kind&&"set"!==e.kind||t.push(e.kind),e.static&&t.push("static"),a(e.key,e.value,t.join(" "))}})).walk(t),postMessage({chunk:n,isLastChunk:!0})}