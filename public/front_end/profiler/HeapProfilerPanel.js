import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{ProfilesPanel}from"./ProfilesPanel.js";import{instance}from"./ProfileTypeRegistry.js";export class HeapProfilerPanel extends ProfilesPanel{constructor(){const e=instance,o=[e.heapSnapshotProfileType,e.trackingHeapSnapshotProfileType,e.samplingHeapProfileType];Root.Runtime.experiments.isEnabled("nativeHeapProfiler")&&(o.push(e.samplingNativeHeapProfileType),o.push(e.samplingNativeHeapSnapshotRendererType),o.push(e.samplingNativeHeapSnapshotBrowserType)),super("heap_profiler",o,"profiler.heap-toggle-recording")}appendApplicableItems(e,o,t){if(!(t instanceof SDK.RemoteObject.RemoteObject))return;if(!this.isShowing())return;const r=t;if(!r.objectId)return;const i=r.objectId;if(!instance.heapSnapshotProfileType.getProfiles().length)return;const s=r.runtimeModel().heapProfilerModel();s&&o.revealSection().appendItem(Common.UIString.UIString("Reveal in Summary view"),function(e){s.snapshotObjectIdForObjectId(i).then(o=>{this.isShowing()&&o&&this.showObject(o,e)})}.bind(this,"Summary"))}handleAction(e,o){const t=self.UI.context.flavor(HeapProfilerPanel);return console.assert(t&&t instanceof HeapProfilerPanel),t.toggleRecord(),!0}wasShown(){self.UI.context.setFlavor(HeapProfilerPanel,this),Host.userMetrics.panelLoaded("heap_profiler","DevTools.Launch.HeapProfiler")}willHide(){self.UI.context.setFlavor(HeapProfilerPanel,null)}showObject(e,o){const t=instance.heapSnapshotProfileType.getProfiles();for(let r=0;r<t.length;r++){const i=t[r];if(i.maxJSObjectId>=e){this.showProfile(i);this.viewForProfile(i).selectLiveObject(o,e);break}}}}