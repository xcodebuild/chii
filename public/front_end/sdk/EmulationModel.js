import*as Common from"../common/common.js";import{CSSModel}from"./CSSModel.js";import{Events,OverlayModel}from"./OverlayModel.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class EmulationModel extends SDKModel{constructor(e){super(e),this._emulationAgent=e.emulationAgent(),this._pageAgent=e.pageAgent(),this._deviceOrientationAgent=e.deviceOrientationAgent(),this._cssModel=e.model(CSSModel),this._overlayModel=e.model(OverlayModel),this._overlayModel&&this._overlayModel.addEventListener(Events.InspectModeWillBeToggled,this._updateTouch,this);const t=Common.Settings.Settings.instance().moduleSetting("javaScriptDisabled");t.addChangeListener(()=>this._emulationAgent.setScriptExecutionDisabled(t.get())),t.get()&&this._emulationAgent.setScriptExecutionDisabled(!0);const i=Common.Settings.Settings.instance().moduleSetting("emulatedCSSMedia"),a=Common.Settings.Settings.instance().moduleSetting("emulatedCSSMediaFeaturePrefersColorScheme"),o=Common.Settings.Settings.instance().moduleSetting("emulatedCSSMediaFeaturePrefersReducedMotion");this._mediaConfiguration=new Map([["type",i.get()],["prefers-color-scheme",a.get()],["prefers-reduced-motion",o.get()]]),i.addChangeListener(()=>{this._mediaConfiguration.set("type",i.get()),this._updateCssMedia()}),a.addChangeListener(()=>{this._mediaConfiguration.set("prefers-color-scheme",a.get()),this._updateCssMedia()}),o.addChangeListener(()=>{this._mediaConfiguration.set("prefers-reduced-motion",o.get()),this._updateCssMedia()}),this._updateCssMedia();const n=Common.Settings.Settings.instance().moduleSetting("emulatedVisionDeficiency");n.addChangeListener(()=>this._emulateVisionDeficiency(n.get())),n.get()&&this._emulateVisionDeficiency(n.get()),this._touchEnabled=!1,this._touchMobile=!1,this._customTouchEnabled=!1,this._touchConfiguration={enabled:!1,configuration:"mobile",scriptId:""}}supportsDeviceEmulation(){return this.target().hasAllCapabilities(Capability.DeviceEmulation)}resetPageScaleFactor(){return this._emulationAgent.resetPageScaleFactor()}emulateDevice(e){return e?this._emulationAgent.invoke_setDeviceMetricsOverride(e):this._emulationAgent.clearDeviceMetricsOverride()}overlayModel(){return this._overlayModel}async emulateLocation(e){if(e||(this._emulationAgent.clearGeolocationOverride(),this._emulationAgent.setTimezoneOverride(""),this._emulationAgent.setLocaleOverride(""),this._emulationAgent.setUserAgentOverride(SDK.multitargetNetworkManager.currentUserAgent())),!e.error)return Promise.all([this._emulationAgent.setGeolocationOverride(e.latitude,e.longitude,Location.DefaultGeoMockAccuracy).catch(e=>Promise.reject({type:"emulation-set-location",message:e.message})),this._emulationAgent.setTimezoneOverride(e.timezoneId).catch(e=>Promise.reject({type:"emulation-set-timezone",message:e.message})),this._emulationAgent.setLocaleOverride(e.locale).catch(e=>Promise.reject({type:"emulation-set-locale",message:e.message})),this._emulationAgent.setUserAgentOverride(SDK.multitargetNetworkManager.currentUserAgent(),e.locale).catch(e=>Promise.reject({type:"emulation-set-user-agent",message:e.message}))]);this._emulationAgent.setGeolocationOverride(),this._emulationAgent.setTimezoneOverride(""),this._emulationAgent.setLocaleOverride(""),this._emulationAgent.setUserAgentOverride(SDK.multitargetNetworkManager.currentUserAgent())}emulateDeviceOrientation(e){e?this._deviceOrientationAgent.setDeviceOrientationOverride(e.alpha,e.beta,e.gamma):this._deviceOrientationAgent.clearDeviceOrientationOverride()}_emulateCSSMedia(e,t){this._emulationAgent.setEmulatedMedia(e,t),this._cssModel&&this._cssModel.mediaQueryResultChanged()}_emulateVisionDeficiency(e){this._emulationAgent.setEmulatedVisionDeficiency(e)}setCPUThrottlingRate(e){this._emulationAgent.setCPUThrottlingRate(e)}emulateTouch(e,t){this._touchEnabled=e,this._touchMobile=t,this._updateTouch()}overrideEmulateTouch(e){this._customTouchEnabled=e,this._updateTouch()}_updateTouch(){let e={enabled:this._touchEnabled,configuration:this._touchMobile?"mobile":"desktop"};this._customTouchEnabled&&(e={enabled:!0,configuration:"mobile"}),this._overlayModel&&this._overlayModel.inspectModeEnabled()&&(e={enabled:!1,configuration:"mobile"}),(this._touchConfiguration.enabled||e.enabled)&&(this._touchConfiguration.enabled&&e.enabled&&this._touchConfiguration.configuration===e.configuration||(this._touchConfiguration=e,this._emulationAgent.setTouchEmulationEnabled(e.enabled,1),this._emulationAgent.setEmitTouchEventsForMouse(e.enabled,e.configuration)))}_updateCssMedia(){const e=this._mediaConfiguration.get("type"),t=[{name:"prefers-color-scheme",value:this._mediaConfiguration.get("prefers-color-scheme")},{name:"prefers-reduced-motion",value:this._mediaConfiguration.get("prefers-reduced-motion")}];this._emulateCSSMedia(e,t)}}export class Location{constructor(e,t,i,a,o){this.latitude=e,this.longitude=t,this.timezoneId=i,this.locale=a,this.error=o}static parseSetting(e){if(e){const[t,i,a,o]=e.split(":"),[n,s]=t.split("@");return new Location(parseFloat(n),parseFloat(s),i,a,Boolean(o))}return new Location(0,0,"","",!1)}static parseUserInput(e,t,i,a){if(!e&&!t)return null;const{valid:o}=Location.latitudeValidator(e),{valid:n}=Location.longitudeValidator(t);if(!o&&!n)return null;const s=o?parseFloat(e):-1,r=n?parseFloat(t):-1;return new Location(s,r,i,a,!1)}static latitudeValidator(e){const t=parseFloat(e);return{valid:/^([+-]?[\d]+(\.\d+)?|[+-]?\.\d+)$/.test(e)&&t>=-90&&t<=90}}static longitudeValidator(e){const t=parseFloat(e);return{valid:/^([+-]?[\d]+(\.\d+)?|[+-]?\.\d+)$/.test(e)&&t>=-180&&t<=180}}static timezoneIdValidator(e){return{valid:""===e||/[a-zA-Z]/.test(e)}}static localeValidator(e){return{valid:""===e||/[a-zA-Z]{2}/.test(e)}}toSetting(){return`${this.latitude}@${this.longitude}:${this.timezoneId}:${this.locale}:${this.error||""}`}}Location.DefaultGeoMockAccuracy=150;export class DeviceOrientation{constructor(e,t,i){this.alpha=e,this.beta=t,this.gamma=i}static parseSetting(e){if(e){const t=JSON.parse(e);return new DeviceOrientation(t.alpha,t.beta,t.gamma)}return new DeviceOrientation(0,0,0)}static parseUserInput(e,t,i){if(!e&&!t&&!i)return null;const{valid:a}=DeviceOrientation.validator(e),{valid:o}=DeviceOrientation.validator(t),{valid:n}=DeviceOrientation.validator(i);if(!a&&!o&&!n)return null;const s=a?parseFloat(e):-1,r=o?parseFloat(t):-1,l=n?parseFloat(i):-1;return new DeviceOrientation(s,r,l)}static validator(e){return{valid:/^([+-]?[\d]+(\.\d+)?|[+-]?\.\d+)$/.test(e)}}toSetting(){return JSON.stringify(this)}}SDKModel.register(EmulationModel,Capability.Emulation,!0);