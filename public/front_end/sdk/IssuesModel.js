import*as Common from"../common/common.js";import{CookieModel}from"./CookieModel.js";import{CrossOriginEmbedderPolicyIssue}from"./CrossOriginEmbedderPolicyIssue.js";import{AggregatedIssue,Issue}from"./Issue.js";import{Events as NetworkManagerEvents,NetworkManager}from"./NetworkManager.js";import{NetworkRequest}from"./NetworkRequest.js";import{Events as ResourceTreeModelEvents,ResourceTreeFrame,ResourceTreeModel}from"./ResourceTreeModel.js";import{SameSiteCookieIssue}from"./SameSiteCookieIssue.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class NetworkIssueDetector{constructor(e,s){this._issuesModel=s,this._networkManager=e.model(NetworkManager),this._networkManager&&this._networkManager.addEventListener(NetworkManagerEvents.RequestFinished,this._handleRequestFinished,this);for(const e of self.SDK.networkLog.requests())this._handleRequestFinished({data:e})}_handleRequestFinished(e){const s=e.data,t=function(e){if(!e.wasBlocked())return null;const s=e.blockedReason()||null;if(s===Protocol.Network.BlockedReason.CoepFrameResourceNeedsCoepHeader||s===Protocol.Network.BlockedReason.CorpNotSameOriginAfterDefaultedToSameOriginByCoep||s===Protocol.Network.BlockedReason.CoopSandboxedIframeCannotNavigateToCoopPage||s===Protocol.Network.BlockedReason.CorpNotSameSite||s===Protocol.Network.BlockedReason.CorpNotSameOrigin)return s;return null}(s);t&&this._issuesModel.addIssue(new CrossOriginEmbedderPolicyIssue(t,s.requestId()))}detach(){this._networkManager&&this._networkManager.removeEventListener(NetworkManagerEvents.RequestFinished,this._handleRequestFinished,this)}}export class IssuesModel extends SDKModel{constructor(e){super(e),this._enabled=!1,this._issues=[],this._aggregatedIssuesByCode=new Map,this._cookiesModel=e.model(CookieModel),this._auditsAgent=null,this._hasSeenMainFrameNavigated=!1,this._networkManager=e.model(NetworkManager);const s=e.model(ResourceTreeModel);s&&s.addEventListener(ResourceTreeModelEvents.MainFrameNavigated,this._onMainFrameNavigated,this),this._networkIssueDetector=null,this.ensureEnabled()}_onMainFrameNavigated(e){const s=e.data,t=[];for(const e of this._issues)e.isAssociatedWithRequestId(s.loaderId)&&t.push(e);this._issues=t,this._aggregatedIssuesByCode.clear();for(const e of this._issues)this._aggregateIssue(e);this._hasSeenMainFrameNavigated=!0,this.dispatchEventToListeners(Events.FullUpdateRequired),this.dispatchEventToListeners(Events.IssuesCountUpdated)}reloadForAccurateInformationRequired(){return!this._hasSeenMainFrameNavigated}ensureEnabled(){this._enabled||(this._enabled=!0,this.target().registerAuditsDispatcher(this),this._auditsAgent=this.target().auditsAgent(),this._auditsAgent.enable(),this._networkIssueDetector=new NetworkIssueDetector(this.target(),this))}_aggregateIssue(e){this._aggregatedIssuesByCode.has(e.code())||this._aggregatedIssuesByCode.set(e.code(),new AggregatedIssue(e.code()));const s=this._aggregatedIssuesByCode.get(e.code());return s.addInstance(e),this.dispatchEventToListeners(Events.AggregatedIssueUpdated,s),this.dispatchEventToListeners(Events.IssuesCountUpdated),s}issueAdded(e){const s=this._createIssuesFromProtocolIssue(e);for(const e of s)this.addIssue(e)}addIssue(e){this._issues.push(e),this._aggregateIssue(e)}issues(){return this._issues}_createIssuesFromProtocolIssue(e){const s=issueCodeHandlers.get(e.code);return s?s(this,e.details):(console.warn("No handler registered for issue code "+e.code),[])}aggregatedIssues(){return this._aggregatedIssuesByCode.values()}numberOfAggregatedIssues(){return this._aggregatedIssuesByCode.size}}function createIssuesForSameSiteCookieIssue(e,s){const t=s.sameSiteCookieIssueDetails;if(!t)return console.warn("SameSite issue without details received"),[];const o=[];if(t.cookieExclusionReasons&&t.cookieExclusionReasons.length>0){for(const e of t.cookieExclusionReasons){const s=SameSiteCookieIssue.codeForSameSiteDetails(e,t.operation);o.push(new SameSiteCookieIssue(s,t))}return o}if(t.cookieWarningReasons)for(const e of t.cookieWarningReasons){const s=SameSiteCookieIssue.codeForSameSiteDetails(e,t.operation);o.push(new SameSiteCookieIssue(s,t))}return o}const issueCodeHandlers=new Map([[Protocol.Audits.InspectorIssueCode.SameSiteCookieIssue,createIssuesForSameSiteCookieIssue]]);export const Events={IssuesCountUpdated:Symbol("IssuesCountUpdated"),AggregatedIssueUpdated:Symbol("AggregatedIssueUpdated"),FullUpdateRequired:Symbol("FullUpdateRequired")};SDKModel.register(IssuesModel,Capability.Audits,!0);