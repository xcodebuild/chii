import*as Common from"../common/common.js";import{Cookie}from"./Cookie.js";import{Issue,IssueCategory}from"./Issue.js";import{IssuesModel}from"./IssuesModel.js";import{NetworkRequest}from"./NetworkRequest.js";import{TargetManager}from"./SDKModel.js";export let IssuesAssociatable;function issues(){const e=TargetManager.instance().mainTarget();if(e){const s=e.model(IssuesModel);return s?s.issues():[]}return[]}function issuesAssociatedWithNetworkRequest(e,s){return e.filter(e=>{for(const t of e.requests())if(t.requestId===s.requestId())return!0;return!1})}function issuesAssociatedWithCookie(e,s,t,o){return e.filter(e=>{for(const r of e.cookies())if(r.domain===s&&r.name===t&&r.path===o)return!0;return!1})}export function issuesAssociatedWith(e,s){if(s instanceof NetworkRequest)return issuesAssociatedWithNetworkRequest(e,s);if(s instanceof Cookie)return issuesAssociatedWithCookie(e,s.domain(),s.name(),s.path());throw new Error("issues can not be associated with "+s)}export function hasIssues(e){return issuesAssociatedWith(issues(),e).length>0}export function hasIssueOfCategory(e,s){return issuesAssociatedWith(issues(),e).some(e=>e.getCategory()===s)}export async function reveal(e,s){const t=issuesAssociatedWith(issues(),e).filter(e=>e.getCategory()===s);if(t.length>0)return Common.Revealer.reveal(t[0])}