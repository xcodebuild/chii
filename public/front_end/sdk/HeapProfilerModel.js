import{DebuggerModel}from"./DebuggerModel.js";import{RemoteObject}from"./RemoteObject.js";import{RuntimeModel}from"./RuntimeModel.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class HeapProfilerModel extends SDKModel{constructor(e){super(e),e.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this)),this._enabled=!1,this._heapProfilerAgent=e.heapProfilerAgent(),this._memoryAgent=e.memoryAgent(),this._runtimeModel=e.model(RuntimeModel),this._samplingProfilerDepth=0}debuggerModel(){return this._runtimeModel.debuggerModel()}runtimeModel(){return this._runtimeModel}enable(){this._enabled||(this._enabled=!0,this._heapProfilerAgent.enable())}startSampling(e){if(this._samplingProfilerDepth++)return;this._heapProfilerAgent.startSampling(e||16384)}stopSampling(){if(!this._samplingProfilerDepth)throw new Error("Sampling profiler is not running.");return--this._samplingProfilerDepth?this.getSamplingProfile():this._heapProfilerAgent.stopSampling()}getSamplingProfile(){return this._heapProfilerAgent.getSamplingProfile()}startNativeSampling(){this._memoryAgent.startSampling(65536)}async stopNativeSampling(){const e=await this._memoryAgent.getSamplingProfile();return this._memoryAgent.stopSampling(),this._convertNativeProfile(e)}async takeNativeSnapshot(){const e=await this._memoryAgent.getAllTimeSamplingProfile();return this._convertNativeProfile(e)}async takeNativeBrowserSnapshot(){const e=await this._memoryAgent.getBrowserSamplingProfile();return this._convertNativeProfile(e)}_convertNativeProfile(e){const t={children:new Map,selfSize:0,callFrame:{functionName:"(root)",url:""}};for(const r of e.samples){r.stack.reverse().reduce((e,t)=>{let r=e.children.get(t);if(r)return r;const s=/^([^:]*)::/.exec(t);return r={children:new Map,callFrame:{functionName:t,url:s&&s[1]||""},selfSize:0},e.children.set(t,r),r},t).selfSize+=r.total}return function e(t){t.children=Array.from(t.children.values()),t.children.forEach(e)}(t),new NativeHeapProfile(t,e.modules)}collectGarbage(){return this._heapProfilerAgent.collectGarbage()}snapshotObjectIdForObjectId(e){return this._heapProfilerAgent.getHeapObjectId(e)}async objectForSnapshotObjectId(e,t){const r=await this._heapProfilerAgent.getObjectByHeapObjectId(e,t);return r&&r.type&&this._runtimeModel.createRemoteObject(r)||null}addInspectedHeapObject(e){return this._heapProfilerAgent.addInspectedHeapObject(e)}takeHeapSnapshot(e,t){return this._heapProfilerAgent.takeHeapSnapshot(e,t)}startTrackingHeapObjects(e){return this._heapProfilerAgent.startTrackingHeapObjects(e)}stopTrackingHeapObjects(e){return this._heapProfilerAgent.stopTrackingHeapObjects(e)}heapStatsUpdate(e){this.dispatchEventToListeners(Events.HeapStatsUpdate,e)}lastSeenObjectId(e,t){this.dispatchEventToListeners(Events.LastSeenObjectId,{lastSeenObjectId:e,timestamp:t})}addHeapSnapshotChunk(e){this.dispatchEventToListeners(Events.AddHeapSnapshotChunk,e)}reportHeapSnapshotProgress(e,t,r){this.dispatchEventToListeners(Events.ReportHeapSnapshotProgress,{done:e,total:t,finished:r})}resetProfiles(){this.dispatchEventToListeners(Events.ResetProfiles,this)}}export const Events={HeapStatsUpdate:Symbol("HeapStatsUpdate"),LastSeenObjectId:Symbol("LastSeenObjectId"),AddHeapSnapshotChunk:Symbol("AddHeapSnapshotChunk"),ReportHeapSnapshotProgress:Symbol("ReportHeapSnapshotProgress"),ResetProfiles:Symbol("ResetProfiles")};class NativeHeapProfile{constructor(e,t){this.head=e,this.modules=t}}class HeapProfilerDispatcher{constructor(e){this._heapProfilerModel=e}heapStatsUpdate(e){this._heapProfilerModel.heapStatsUpdate(e)}lastSeenObjectId(e,t){this._heapProfilerModel.lastSeenObjectId(e,t)}addHeapSnapshotChunk(e){this._heapProfilerModel.addHeapSnapshotChunk(e)}reportHeapSnapshotProgress(e,t,r){this._heapProfilerModel.reportHeapSnapshotProgress(e,t,r)}resetProfiles(){this._heapProfilerModel.resetProfiles()}}SDKModel.register(HeapProfilerModel,Capability.JS,!1);