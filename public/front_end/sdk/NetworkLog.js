import*as Common from"../common/common.js";import{ConsoleMessage,ConsoleModel,MessageLevel,MessageSource}from"./ConsoleModel.js";import{Events as NetworkManagerEvents,Message,NetworkManager}from"./NetworkManager.js";import{Events as NetworkRequestEvents,InitiatorType,NetworkRequest}from"./NetworkRequest.js";import{Events as ResourceTreeModelEvents,ResourceTreeFrame,ResourceTreeModel}from"./ResourceTreeModel.js";import{RuntimeModel}from"./RuntimeModel.js";import{SDKModelObserver,TargetManager}from"./SDKModel.js";export class NetworkLog extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._requests=[],this._requestsSet=new Set,this._requestsMap=new Map,this._pageLoadForManager=new Map,this._isRecording=!0,TargetManager.instance().observeModels(NetworkManager,this)}modelAdded(e){const t=[];t.push(e.addEventListener(NetworkManagerEvents.RequestStarted,this._onRequestStarted,this)),t.push(e.addEventListener(NetworkManagerEvents.RequestUpdated,this._onRequestUpdated,this)),t.push(e.addEventListener(NetworkManagerEvents.RequestRedirected,this._onRequestRedirect,this)),t.push(e.addEventListener(NetworkManagerEvents.RequestFinished,this._onRequestUpdated,this)),t.push(e.addEventListener(NetworkManagerEvents.MessageGenerated,this._networkMessageGenerated.bind(this,e)));const s=e.target().model(ResourceTreeModel);s&&(t.push(s.addEventListener(ResourceTreeModelEvents.WillReloadPage,this._willReloadPage,this)),t.push(s.addEventListener(ResourceTreeModelEvents.MainFrameNavigated,this._onMainFrameNavigated,this)),t.push(s.addEventListener(ResourceTreeModelEvents.Load,this._onLoad,this)),t.push(s.addEventListener(ResourceTreeModelEvents.DOMContentLoaded,this._onDOMContentLoaded.bind(this,s)))),e[_events]=t}modelRemoved(e){this._removeNetworkManagerListeners(e)}_removeNetworkManagerListeners(e){Common.EventTarget.EventTarget.removeEventListeners(e[_events])}setIsRecording(e){this._isRecording!==e&&(this._isRecording=e,e?TargetManager.instance().observeModels(NetworkManager,this):(TargetManager.instance().unobserveModels(NetworkManager,this),TargetManager.instance().models(NetworkManager).forEach(this._removeNetworkManagerListeners.bind(this))))}requestForURL(e){return this._requests.find(t=>t.url()===e)||null}requests(){return this._requests}requestByManagerAndId(e,t){for(let s=this._requests.length-1;s>=0;s--){const r=this._requests[s];if(t===r.requestId()&&e===NetworkManager.forRequest(r))return r}return null}_requestByManagerAndURL(e,t){for(const s of this._requests)if(t===s.url()&&e===NetworkManager.forRequest(s))return s;return null}_initializeInitiatorSymbolIfNeeded(e){e[_initiatorDataSymbol]||(e[_initiatorDataSymbol]={info:null,chain:null,request:void 0})}initiatorInfoForRequest(e){if(this._initializeInitiatorSymbolIfNeeded(e),e[_initiatorDataSymbol].info)return e[_initiatorDataSymbol].info;let t=InitiatorType.Other,s="",r=-1/0,a=-1/0,o=null,i=null;const n=e.initiator(),d=e.redirectSource();if(d)t=InitiatorType.Redirect,s=d.url();else if(n)if(n.type===Protocol.Network.InitiatorType.Parser)t=InitiatorType.Parser,s=n.url?n.url:s,r=n.lineNumber?n.lineNumber:r;else if(n.type===Protocol.Network.InitiatorType.Script){for(let e=n.stack;e;e=e.parent){const i=e.callFrames.length?e.callFrames[0]:null;if(i){t=InitiatorType.Script,s=i.url||Common.UIString.UIString("<anonymous>"),r=i.lineNumber,a=i.columnNumber,o=i.scriptId;break}}!n.stack&&n.url&&(t=InitiatorType.Script,s=n.url,r=n.lineNumber||0),n.stack&&n.stack.callFrames&&n.stack.callFrames.length&&(i=n.stack||null)}else n.type===Protocol.Network.InitiatorType.Preload?t=InitiatorType.Preload:n.type===Protocol.Network.InitiatorType.SignedExchange&&(t=InitiatorType.SignedExchange,s=n.url);return e[_initiatorDataSymbol].info={type:t,url:s,lineNumber:r,columnNumber:a,scriptId:o,stack:i},e[_initiatorDataSymbol].info}initiatorGraphForRequest(e){const t=new Map,s=NetworkManager.forRequest(e);for(const r of this._requests){s===NetworkManager.forRequest(r)&&this._initiatorChain(r).has(e)&&t.set(r,this._initiatorRequest(r))}return{initiators:this._initiatorChain(e),initiated:t}}_initiatorChain(e){this._initializeInitiatorSymbolIfNeeded(e);let t=e[_initiatorDataSymbol].chain;if(t)return t;t=new Set;let s=e;do{if(this._initializeInitiatorSymbolIfNeeded(s),s[_initiatorDataSymbol].chain){t.addAll(s[_initiatorDataSymbol].chain);break}if(t.has(s))break;t.add(s),s=this._initiatorRequest(s)}while(s);return e[_initiatorDataSymbol].chain=t,t}_initiatorRequest(e){if(this._initializeInitiatorSymbolIfNeeded(e),void 0!==e[_initiatorDataSymbol].request)return e[_initiatorDataSymbol].request;const t=this.initiatorInfoForRequest(e).url,s=NetworkManager.forRequest(e);return e[_initiatorDataSymbol].request=s?this._requestByManagerAndURL(s,t):null,e[_initiatorDataSymbol].request}_willReloadPage(){Common.Settings.Settings.instance().moduleSetting("network_log.preserve-log").get()||this.reset()}_onMainFrameNavigated(e){const t=e.data,s=t.resourceTreeModel().target().model(NetworkManager);if(!s||t.resourceTreeModel().target().parentTarget())return;const r=this._requests,a=this._requests.filter(e=>NetworkManager.forRequest(e)===s),o=this._requestsSet;this._requests=[],this._requestsSet=new Set,this._requestsMap.clear(),this.dispatchEventToListeners(Events.Reset);let i=null;const n=[];for(const e of a)if(e.loaderId===t.loaderId){if(!i){i=new PageLoad(e);let t=e.redirectSource();for(;t;)n.push(t),t=t.redirectSource()}n.push(e)}const d=[];for(const e of r){if(!e.initiatedByServiceWorker())continue;n.some(t=>t.url()===e.url()&&t.issueTime()<=e.issueTime())&&d.push(e)}n.push(...d);for(const e of n)i.bindRequest(e),o.delete(e),this._addRequest(e);if(Common.Settings.Settings.instance().moduleSetting("network_log.preserve-log").get())for(const e of o)this._addRequest(e);i&&this._pageLoadForManager.set(s,i)}_addRequest(e){this._requests.push(e),this._requestsSet.add(e);const t=this._requestsMap.get(e.requestId());t?t.push(e):this._requestsMap.set(e.requestId(),[e]),this.dispatchEventToListeners(Events.RequestAdded,e)}importRequests(e){this.reset(),this._requests=[],this._requestsSet.clear(),this._requestsMap.clear();for(const t of e)this._addRequest(t)}_onRequestStarted(e){const t=e.data,s=NetworkManager.forRequest(t),r=s?this._pageLoadForManager.get(s):null;r&&r.bindRequest(t),this._addRequest(t)}_onRequestUpdated(e){const t=e.data;this._requestsSet.has(t)&&this.dispatchEventToListeners(Events.RequestUpdated,t)}_onRequestRedirect(e){delete e.data[_initiatorDataSymbol]}_onDOMContentLoaded(e,t){const s=e.target().model(NetworkManager),r=s?this._pageLoadForManager.get(s):null;r&&(r.contentLoadTime=t.data)}_onLoad(e){const t=e.data.resourceTreeModel.target().model(NetworkManager),s=t?this._pageLoadForManager.get(t):null;s&&(s.loadTime=e.data.loadTime)}reset(){this._requests=[],this._requestsSet.clear(),this._requestsMap.clear();const e=new Set(TargetManager.instance().models(NetworkManager));for(const t of this._pageLoadForManager.keys())e.has(t)||this._pageLoadForManager.delete(t);this.dispatchEventToListeners(Events.Reset)}_networkMessageGenerated(e,t){const s=t.data,r=new ConsoleMessage(e.target().model(RuntimeModel),MessageSource.Network,s.warning?MessageLevel.Warning:MessageLevel.Info,s.message);this.associateConsoleMessageWithRequest(r,s.requestId),ConsoleModel.instance().addMessage(r)}associateConsoleMessageWithRequest(e,t){const s=e.target(),r=s?s.model(NetworkManager):null;if(!r)return;const a=this.requestByManagerAndId(r,t);if(!a)return;e[_requestSymbol]=a;const o=a.initiator();o&&(e.stackTrace=o.stack||void 0,o.url&&(e.url=o.url,e.line=o.lineNumber||0))}static requestForConsoleMessage(e){return e[_requestSymbol]||null}requestsForId(e){return this._requestsMap.get(e)||[]}}export class PageLoad{constructor(e){this.id=++PageLoad._lastIdentifier,this.url=e.url(),this.startTime=e.startTime,this.loadTime,this.contentLoadTime,this.mainRequest=e,this._showDataSaverWarningIfNeeded()}async _showDataSaverWarningIfNeeded(){const e=NetworkManager.forRequest(this.mainRequest);if(!e)return;this.mainRequest.finished||await this.mainRequest.once(NetworkRequestEvents.FinishedLoading);const t=this.mainRequest.requestHeaderValue("Save-Data");if(!PageLoad._dataSaverMessageWasShown&&t&&"on"===t){const t=Common.UIString.UIString("Consider disabling %s while debugging. For more info see: %s",Common.UIString.UIString("Chrome Data Saver"),"https://support.google.com/chrome/?p=datasaver");e.dispatchEventToListeners(NetworkManagerEvents.MessageGenerated,{message:t,requestId:this.mainRequest.requestId(),warning:!0}),PageLoad._dataSaverMessageWasShown=!0}}static forRequest(e){return e[PageLoad._pageLoadForRequestSymbol]||null}bindRequest(e){e[PageLoad._pageLoadForRequestSymbol]=this}}PageLoad._lastIdentifier=0,PageLoad._pageLoadForRequestSymbol=Symbol("PageLoadForRequest"),PageLoad._dataSaverMessageWasShown=!1;const _requestSymbol=Symbol("_request");export const Events={Reset:Symbol("Reset"),RequestAdded:Symbol("RequestAdded"),RequestUpdated:Symbol("RequestUpdated")};const _initiatorDataSymbol=Symbol("InitiatorData"),_events=Symbol("SDK.NetworkLog.events");export let InitiatorGraph;export let _InitiatorInfo;