import*as Platform from"../platform/platform.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class PerformanceMetricsModel extends SDKModel{constructor(e){super(e),this._agent=e.performanceAgent();const t=MetricMode;this._metricModes=new Map([["TaskDuration",t.CumulativeTime],["ScriptDuration",t.CumulativeTime],["LayoutDuration",t.CumulativeTime],["RecalcStyleDuration",t.CumulativeTime],["LayoutCount",t.CumulativeCount],["RecalcStyleCount",t.CumulativeCount]]),this._metricData=new Map}enable(){return this._agent.enable()}disable(){return this._agent.disable()}async requestMetrics(){const e=await this._agent.getMetrics()||[],t=new Map,a=performance.now();for(const i of e){let e,m=this._metricData.get(i.name);switch(m||(m={},this._metricData.set(i.name,m)),this._metricModes.get(i.name)){case MetricMode.CumulativeTime:e=m.lastTimestamp?Platform.NumberUtilities.clamp(1e3*(i.value-m.lastValue)/(a-m.lastTimestamp),0,1):0,m.lastValue=i.value,m.lastTimestamp=a;break;case MetricMode.CumulativeCount:e=m.lastTimestamp?Math.max(0,1e3*(i.value-m.lastValue)/(a-m.lastTimestamp)):0,m.lastValue=i.value,m.lastTimestamp=a;break;default:e=i.value}t.set(i.name,e)}return{metrics:t,timestamp:a}}}const MetricMode={CumulativeTime:Symbol("CumulativeTime"),CumulativeCount:Symbol("CumulativeCount")};SDKModel.register(PerformanceMetricsModel,Capability.DOM,!1);