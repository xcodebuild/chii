import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{ElementsPanel}from"./ElementsPanel.js";export class ClassesPaneWidget extends UI.Widget.Widget{constructor(){super(!0),this.registerRequiredCSS("elements/classesPaneWidget.css"),this.contentElement.className="styles-element-classes-pane";const e=this.contentElement.createChild("div","title-container");this._input=e.createChild("div","new-class-input monospace"),this.setDefaultFocusedElement(this._input),this._classesContainer=this.contentElement.createChild("div","source-code"),this._classesContainer.classList.add("styles-element-classes-container"),this._prompt=new ClassNamePrompt(this._nodeClasses.bind(this)),this._prompt.setAutocompletionTimeout(0),this._prompt.renderAsBlock();const s=this._prompt.attach(this._input);this._prompt.setPlaceholder(Common.UIString.UIString("Add new class")),this._prompt.addEventListener(UI.TextPrompt.Events.TextChanged,this._onTextChanged,this),s.addEventListener("keydown",this._onKeyDown.bind(this),!1),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.DOMModel.DOMModel,SDK.DOMModel.Events.DOMMutated,this._onDOMMutated,this),this._mutatingNodes=new Set,this._pendingNodeClasses=new Map,this._updateNodeThrottler=new Common.Throttler.Throttler(0),this._previousTarget=null,self.UI.context.addFlavorChangeListener(SDK.DOMModel.DOMNode,this._onSelectedNodeChanged,this)}_splitTextIntoClasses(e){return e.split(/[,\s]/).map(e=>e.trim()).filter(e=>e.length)}_onKeyDown(e){if(!isEnterKey(e)&&!isEscKey(e))return;if(isEnterKey(e)&&(e.consume(),this._prompt.acceptAutoComplete()))return;let s=e.target.textContent;isEscKey(e)&&(Platform.StringUtilities.isWhitespace(s)||e.consume(!0),s=""),this._prompt.clearAutocomplete(),e.target.textContent="";const t=self.UI.context.flavor(SDK.DOMModel.DOMNode);if(!t)return;const o=this._splitTextIntoClasses(s);if(!o.length)return;for(const e of o)this._toggleClass(t,e,!0);const n=o.join(" "),i=o.length>1?ls`Classes ${n} added.`:ls`Class ${n} added.`;UI.ARIAUtils.alert(i,this.contentElement),this._installNodeClasses(t),this._update()}_onTextChanged(){const e=self.UI.context.flavor(SDK.DOMModel.DOMNode);e&&this._installNodeClasses(e)}_onDOMMutated(e){const s=e.data;this._mutatingNodes.has(s)||(delete s[ClassesPaneWidget._classesSymbol],this._update())}_onSelectedNodeChanged(e){this._previousTarget&&this._prompt.text()&&(this._input.textContent="",this._installNodeClasses(this._previousTarget)),this._previousTarget=e.data,this._update()}wasShown(){this._update()}_update(){if(!this.isShowing())return;let e=self.UI.context.flavor(SDK.DOMModel.DOMNode);if(e&&(e=e.enclosingElementOrSelf()),this._classesContainer.removeChildren(),this._input.disabled=!e,!e)return;const s=this._nodeClasses(e),t=[...s.keys()];t.sort(String.caseInsensetiveComparator);for(let e=0;e<t.length;++e){const o=t[e],n=UI.UIUtils.CheckboxLabel.create(o,s.get(o));n.classList.add("monospace"),n.checkboxElement.addEventListener("click",this._onClick.bind(this,o),!1),this._classesContainer.appendChild(n)}}_onClick(e,s){const t=self.UI.context.flavor(SDK.DOMModel.DOMNode);if(!t)return;const o=s.target.checked;this._toggleClass(t,e,o),this._installNodeClasses(t)}_nodeClasses(e){let s=e[ClassesPaneWidget._classesSymbol];if(!s){const t=(e.getAttribute("class")||"").split(/\s/);s=new Map;for(let e=0;e<t.length;++e){const o=t[e].trim();o.length&&s.set(o,!0)}e[ClassesPaneWidget._classesSymbol]=s}return s}_toggleClass(e,s,t){this._nodeClasses(e).set(s,t)}_installNodeClasses(e){const s=this._nodeClasses(e),t=new Set;for(const e of s.keys())s.get(e)&&t.add(e);const o=this._splitTextIntoClasses(this._prompt.textWithCurrentSuggestion());for(const e of o)t.add(e);const n=[...t.values()].sort();this._pendingNodeClasses.set(e,n.join(" ")),this._updateNodeThrottler.schedule(this._flushPendingClasses.bind(this))}_flushPendingClasses(){const e=[];for(const t of this._pendingNodeClasses.keys()){this._mutatingNodes.add(t);const o=t.setAttributeValuePromise("class",this._pendingNodeClasses.get(t)).then(s.bind(this,t));e.push(o)}return this._pendingNodeClasses.clear(),Promise.all(e);function s(e){this._mutatingNodes.delete(e)}}}ClassesPaneWidget._classesSymbol=Symbol("ClassesPaneWidget._classesSymbol");export class ButtonProvider{constructor(){this._button=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Element Classes"),""),this._button.setText(".cls"),this._button.element.classList.add("monospace"),this._button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._clicked,this),this._view=new ClassesPaneWidget}_clicked(){ElementsPanel.instance().showToolbarPane(this._view.isShowing()?null:this._view,this._button)}item(){return this._button}}export class ClassNamePrompt extends UI.TextPrompt.TextPrompt{constructor(e){super(),this._nodeClasses=e,this.initialize(this._buildClassNameCompletions.bind(this)," "),this.disableDefaultSuggestionForEmptyInput(),this._selectedFrameId="",this._classNamesPromise=null}async _getClassNames(e){const s=[],t=new Set;this._selectedFrameId=e.frameId();const o=e.domModel().cssModel(),n=o.allStyleSheets();for(const e of n){if(e.frameId!==this._selectedFrameId)continue;const n=o.classNamesPromise(e.id).then(e=>{for(const s of e)t.add(s)});s.push(n)}const i=e.domModel().classNamesPromise(e.ownerDocument.id).then(e=>{for(const s of e)t.add(s)});return s.push(i),await Promise.all(s),[...t]}_buildClassNameCompletions(e,s,t){s&&!t||(this._classNamesPromise=null);const o=self.UI.context.flavor(SDK.DOMModel.DOMNode);return o&&(s||t||e.trim())?(this._classNamesPromise&&this._selectedFrameId===o.frameId()||(this._classNamesPromise=this._getClassNames(o)),this._classNamesPromise.then(e=>{const t=this._nodeClasses(o);return e=e.filter(e=>!t.get(e)),"."===s[0]&&(e=e.map(e=>"."+e)),e.filter(e=>e.startsWith(s)).sort().map(e=>({text:e}))})):Promise.resolve([])}}